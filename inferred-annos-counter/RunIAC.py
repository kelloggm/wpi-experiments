# Run this script by passing the name of the project as argument. 
# Example: python RunIAC.py icalavailable
# This file takes "AnnotationStats.csv" as input, which is generated by running RunWPI.py on the target project.
# The input file contains the Annotation Statistics (Original count and Inferred).
# The output file "AnnotationStats_IAC_Output.csv" contains the values of "AnnotationStats.csv" and "Original inferred count", "Original inferred %".
# "Original count" is the number of annotations of the given kind in the original program.
# "Inferred" is the number of annotations of the given kind inferred by WPI.
# "Original inferred count" is the number of the original annotations of that kind that were inferred by WPI.
# "Original inferred %" is the percentage of the original annotations of that kind that were inferred by WPI: that is, it equals "Original inferred count" divided by "Original".
import subprocess
import glob
import os
import sys
import pandas as pd


project_name = str(sys.argv[1])

# Read Annotation Statistics (Original count and Inferred)
annotationsTable = pd.read_csv("inputExamples/"+project_name+"/AnnotationStats.csv")
# A new column name is added to properly handle the annotation names
annotationsTable["Names"] = ""

# This will store the annotation names in the Names column of the dataframe
# Example, org.checkerframework.checker.regex.qual.Regex => Regex
for index, row in annotationsTable.iterrows():
    name = row["Annotation"].split(".")[-1]
    annotationsTable.at[index, 'Names'] = name

    
# This will get all the files from a path with a particular extension
def get_all_files(path, extension):
    file_list = []
    for root, dirs_list, files_list in os.walk(path):
        for file_name in files_list:
            if os.path.splitext(file_name)[-1] == extension:
                file_name_path = os.path.join(root, file_name)
                file_list.append(os.path.abspath(file_name_path))
    return file_list
    
javafiles = get_all_files('inputExamples/'+project_name+'/human-written/', '.java')
ajavafiles = get_all_files('inputExamples/'+project_name+'/generated/', '.ajava')

# In the inputExamples/project-name folder create a new folder called the output that will contain all the outputs of inferred-annos-counter
if os.path.exists("inputExamples/"+project_name+"/output") == 0:
    os.system("mkdir "+"inputExamples/"+project_name+"/output")

# For each java file, inferred-annos-counter calculates the "Original inferred count" and store it in the dataframe
for jf in javafiles:
    jf_name = jf[:-5]
    jf_name = jf_name.split("/")[-1]
    ajf_list = []
    
    for ajf in ajavafiles:
        ajf_name = ajf[:-6].split("/")[-1]
        if len(jf_name) == len(ajf_name):
            continue
        if jf_name in ajf_name and ajf_name[0:len(jf_name)] == jf_name:
            ajf_list.append(ajf)
            
    if len(ajf_list) == 0:
        continue
    ajf_all = ' '.join(ajf_list)
    
    outputFileName = "inputExamples/"+project_name+"/output/"+jf_name+".txt"
    process = subprocess.run("./gradlew run --args='"+ jf +" " + ajf_all + "' >> " + outputFileName, shell=True)
    
    f = open(outputFileName, "r")
    for x in f:
      if "@" in x:
          lineElements = x.split(" ")
          annot = lineElements[0][1:]
          stats = lineElements[2].split("/")
          found = stats[0]
          original = stats[1]
          
          if annotationsTable[annotationsTable["Names"]==annot].empty:
              print(annot, annotationsTable[annotationsTable["Names"]==annot])
              print()
              continue
          annotationsTable.loc[annotationsTable["Names"]==annot, "Original inferred count"] = int(found) + int(annotationsTable.loc[annotationsTable["Names"]==annot, "Original inferred count"].values[0])

# This line calculates the "Original inferred %"
annotationsTable["Original inferred %"] = (annotationsTable["Original inferred count"]/annotationsTable["Original count"])*100

# This line removes the "Names" column that was created temporarily 
annotationsTable = annotationsTable.drop('Names', axis=1)

# The dataframe is stored in inputExamples/project-name
annotationsTable.to_csv("inputExamples/"+project_name+"/AnnotationStats_IAC_Output.csv", index=False)          







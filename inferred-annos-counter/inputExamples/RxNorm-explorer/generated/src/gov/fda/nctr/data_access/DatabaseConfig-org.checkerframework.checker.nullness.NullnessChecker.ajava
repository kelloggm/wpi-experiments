package gov.fda.nctr.data_access;

import javax.sql.DataSource;
import javax.validation.constraints.NotEmpty;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.beans.factory.annotation.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class DatabaseConfig {

    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Logger log = LoggerFactory.getLogger(DatabaseConfig.class);

    private @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull String driverClassName;

    private @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull String url;

    private @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull String username;

    private @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull String password;

    @org.checkerframework.dataflow.qual.SideEffectFree
    // Spring Framework should enforce the field initialization constraints.
    DatabaseConfig() {
    }

    public enum DatabaseUnquoatedIdentifierStorage {

        UPPERCASE, LOWERCASE, MIXED
    }

    public enum DatabaseType {

        POSTGRESQL, ORACLE
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.password" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.url" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.username" })
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DataSource getDataSource() {
        return DataSourceBuilder.create().driverClassName(driverClassName).url(url).username(username).password(password).build();
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.driverClassName" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseType getDatabaseType() {
        if (driverClassName.startsWith("org.postgresql."))
            return DatabaseType.POSTGRESQL;
        else if (driverClassName.startsWith("oracle."))
            return DatabaseType.ORACLE;
        else
            throw new RuntimeException("Unrecognized database type.");
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String normalizeId(String ident) {
        switch(getUnquotedIdentifierStorage()) {
            case LOWERCASE:
                return ident.toLowerCase();
            case UPPERCASE:
                return ident.toUpperCase();
            default:
                return ident;
        }
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object optionalJsonParamValue(String maybeContent) {
        return makeJsonParamValueImpl(maybeContent);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object jsonParamValue(String content) {
        Object paramVal = makeJsonParamValueImpl(content);
        if (paramVal == null)
            throw new RuntimeException("Expected content, got null.");
        else
            return paramVal;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object jsonParamValue(ObjectNode content) {
        Object paramVal = makeJsonParamValueImpl(content.toString());
        if (paramVal == null)
            throw new RuntimeException("Expected content, got null.");
        else
            return paramVal;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.driverClassName" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.SideEffectFree
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object makeJsonParamValueImpl(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String content) {
        try {
            switch(getDatabaseType()) {
                case ORACLE:
                    return content;
                case POSTGRESQL:
                    // (removed code here so as to not require postgres driver dependency)
                    throw new RuntimeException("Unsupported database type.");
                default:
                    throw new RuntimeException("Unsupported database type.");
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.driverClassName" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.driverClassName" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.password" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.url" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.username" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DatabaseUnquoatedIdentifierStorage getUnquotedIdentifierStorage() {
        switch(getDatabaseType()) {
            case POSTGRESQL:
                return DatabaseUnquoatedIdentifierStorage.LOWERCASE;
            case ORACLE:
                return DatabaseUnquoatedIdentifierStorage.UPPERCASE;
            default:
                throw new RuntimeException("Database unquoted identifier setting needs to be configured.");
        }
    }
}

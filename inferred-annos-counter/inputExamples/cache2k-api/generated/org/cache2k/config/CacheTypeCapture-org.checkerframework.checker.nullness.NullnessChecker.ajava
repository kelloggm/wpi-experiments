package org.cache2k.config;

/*-
 * #%L
 * cache2k API
 * %%
 * Copyright (C) 2000 - 2022 headissue GmbH, Munich
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
import java.lang.reflect.ParameterizedType;
import java.util.Arrays;
import org.cache2k.Cache2kBuilder;

/**
 * Helper class to capture generic types into a type descriptor. This is used to provide the cache
 * with detailed type information of the key and value objects.
 *
 * <p>Example usage with {@link Cache2kBuilder}:
 *
 * <pre>{@code
 * CacheBuilder.newCache().valueType(new CacheType<List<String>(){}).build()
 * }</pre>
 *
 * This constructs a cache with the known type {@code List<String>} for its value.
 *
 * @see <a href="https://github.com/google/guava/wiki/ReflectionExplained">Google Guava CacheType
 *     explaination</a>
 * @author Jens Wilke
 */
@org.checkerframework.framework.qual.AnnotatedFor(
    "org.checkerframework.checker.nullness.NullnessChecker")
public class CacheTypeCapture<T> implements CacheType<T> {

  private final CacheType<T> descriptor =
      (CacheType<T>)
          CacheType.of(
              ((ParameterizedType) this.getClass().getGenericSuperclass())
                  .getActualTypeArguments()[0]);

  @org.checkerframework.dataflow.qual.SideEffectFree
  protected CacheTypeCapture() {}

  @org.checkerframework.dataflow.qual.Pure
  public CacheType<?> getComponentType() {
    return descriptor.getComponentType();
  }

  @org.checkerframework.dataflow.qual.Pure
  public Class<T> getType() {
    return descriptor.getType();
  }

  @org.checkerframework.dataflow.qual.Pure
  public CacheType<?>[] getTypeArguments() {
    return descriptor.getTypeArguments();
  }

  @org.checkerframework.dataflow.qual.Pure
  public String getTypeName() {
    return descriptor.getTypeName();
  }

  @org.checkerframework.dataflow.qual.Pure
  public boolean hasTypeArguments() {
    return descriptor.hasTypeArguments();
  }

  @org.checkerframework.dataflow.qual.Pure
  public boolean isArray() {
    return descriptor.isArray();
  }

  @org.checkerframework.dataflow.qual.Pure
  public boolean equals(Object o) {
    return descriptor.equals(o);
  }

  @org.checkerframework.dataflow.qual.Pure
  public int hashCode() {
    return descriptor.hashCode();
  }

  @org.checkerframework.dataflow.qual.SideEffectFree
  public String toString() {
    return descriptor.toString();
  }

  private abstract static class BaseType<T> implements CacheType<T> {

    @org.checkerframework.dataflow.qual.Pure
    public CacheType<?> getComponentType() {
      return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Class<T> getType() {
      return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public CacheType<?>[] getTypeArguments() {
      return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean hasTypeArguments() {
      return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isArray() {
      return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public final String toString() {
      return DESCRIPTOR_TO_STRING_PREFIX + getTypeName();
    }
  }

  /** CacheType representing a class. */
  public static class OfClass<T> extends BaseType<T> {

    private final Class<T> type;

    public OfClass(
        @org.checkerframework.checker.initialization.qual.Initialized
            @org.checkerframework.checker.nullness.qual.NonNull
            Class<T> type) {
      if (type.isArray()) {
        throw new IllegalArgumentException("array is not a regular class");
      }
      this.type = type;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Class<T> getType() {
      return type;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    static String shortenName(String s) {
      final String langPrefix = "java.lang.";
      if (s.startsWith(langPrefix)) {
        return s.substring(langPrefix.length());
      }
      return s;
    }

    public String getTypeName() {
      return shortenName(type.getCanonicalName());
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      OfClass<?> classType = (OfClass<?>) o;
      return type.equals(classType.type);
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
      return type.hashCode();
    }
  }

  /** CacheType representing an array. */
  public static class OfArray extends BaseType<Void> {

    private final CacheType<?> componentType;

    public OfArray(
        @org.checkerframework.checker.initialization.qual.Initialized
            @org.checkerframework.checker.nullness.qual.NonNull
            CacheType<?> componentType) {
      this.componentType = componentType;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean isArray() {
      return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public CacheType<?> getComponentType() {
      return componentType;
    }

    @org.checkerframework.dataflow.qual.Pure
    private static int countDimensions(CacheType<?> td) {
      int cnt = 0;
      while (td.isArray()) {
        td = td.getComponentType();
        cnt++;
      }
      return cnt;
    }

    @org.checkerframework.dataflow.qual.Pure
    static Class<?> finalPrimitiveType(CacheType<?> td) {
      while (td.isArray()) {
        td = td.getComponentType();
      }
      return td.getType();
    }

    public String getTypeName() {
      StringBuilder sb = new StringBuilder();
      int dimensions = countDimensions(this);
      if (dimensions > 1) {
        sb.append(finalPrimitiveType(this));
      } else {
        sb.append(getComponentType().getTypeName());
      }
      for (int i = 0; i < dimensions; i++) {
        sb.append("[]");
      }
      return sb.toString();
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      OfArray arrayType = (OfArray) o;
      return componentType.equals(arrayType.componentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
      return componentType.hashCode();
    }
  }

  /** CacheType representing a generic type. */
  public static class OfGeneric<T> extends BaseType<T> {

    private final CacheType<?>[] typeArguments;

    private final Class<T> type;

    public OfGeneric(
        @org.checkerframework.checker.initialization.qual.Initialized
            @org.checkerframework.checker.nullness.qual.NonNull
            Class<T> type,
        @org.checkerframework.checker.initialization.qual.Initialized
            @org.checkerframework.checker.nullness.qual.NonNull
            CacheType<?> @org.checkerframework.checker.initialization.qual.Initialized
                    @org.checkerframework.checker.nullness.qual.NonNull []
                typeArguments) {
      this.typeArguments = typeArguments;
      this.type = type;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Class<T> getType() {
      return type;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean hasTypeArguments() {
      return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public CacheType<?>[] getTypeArguments() {
      return typeArguments;
    }

    public String getTypeName() {
      return OfClass.shortenName(type.getCanonicalName())
          + "<"
          + arrayToString(typeArguments)
          + '>';
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      OfGeneric<?> that = (OfGeneric<?>) o;
      return Arrays.equals(typeArguments, that.typeArguments) && type.equals(that.type);
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
      int result = Arrays.hashCode(typeArguments);
      result = 31 * result + type.hashCode();
      return result;
    }
  }

  static String arrayToString(CacheType<?>[] a) {
    if (a.length < 1) {
      throw new IllegalArgumentException();
    }
    StringBuilder sb = new StringBuilder();
    int l = a.length - 1;
    for (int i = 0; ; i++) {
      sb.append(a[i].getTypeName());
      if (i == l) return sb.toString();
      sb.append(',');
    }
  }
}
